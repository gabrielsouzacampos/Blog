CREATE TABLE CATEGORIA (
    CDCATEGORIA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NMCATEGORIA VARCHAR2(80) NOT NULL,
    DSCATEGORIA VARCHAR2(255) NOT NULL,
    DTCADASTRO  DATE DEFAULT SYSDATE,
    HRCADASTRO  DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_CATEGORIA PRIMARY KEY (CDCATEGORIA)
);

CREATE TABLE LOG_CATEGORIA (
    CDCATEGORIA NUMBER(5) NOT NULL,
    NRLOG       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NMCATEGORIA VARCHAR2(80) NOT NULL,
    DSCATEGORIA VARCHAR2(255) NOT NULL,
    FLTIPOLOG   CHAR(1) NOT NULL,
    DTALTERACAO DATE DEFAULT SYSDATE,
    HRALTERACAO DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_CATEGORIA_LOG PRIMARY KEY (CDCATEGORIA, NRLOG)
);

CREATE OR REPLACE TRIGGER TRIGGER_CATEGORIA
    AFTER INSERT OR UPDATE OR DELETE ON CATEGORIA FOR EACH ROW
DECLARE
    strGeraLog  CHAR(1);
    strOperacao CHAR(1);
BEGIN
    IF INSERTING THEN strOperacao := 'I';
    ELSIF UPDATING THEN strOperacao := 'A';
    ELSIF DELETING THEN strOperacao := 'E';
    END IF;

    strGeraLog := 'S';

    IF (strOperacao = 'A') THEN
        IF (:OLD.CDCATEGORIA = :NEW.CDCATEGORIA)
           AND (:OLD.NMCATEGORIA = :NEW.NMCATEGORIA)
           AND (:OLD.DSCATEGORIA = :NEW.DSCATEGORIA)
        THEN
            strGeraLog := 'N';
        END IF;
    END IF;

    IF (strGeraLog = 'S') THEN
        IF strOperacao IN ('I', 'A') THEN
            INSERT INTO LOG_CATEGORIA (
                CDCATEGORIA,
                FLTIPOLOG,
                NMCATEGORIA,
                DSCATEGORIA,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                :NEW.CDCATEGORIA,
                strOperacao,
                :NEW.NMCATEGORIA,
                :NEW.DSCATEGORIA,
                TRUNC(SYSDATE),
                SYSDATE
            );
        ELSE
            INSERT INTO LOG_CATEGORIA (
                CDCATEGORIA,
                FLTIPOLOG,
                NMCATEGORIA,
                DSCATEGORIA,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                :OLD.CDCATEGORIA,
                strOperacao,
                :OLD.NMCATEGORIA,
                :OLD.DSCATEGORIA,
                TRUNC(SYSDATE),
                SYSDATE
            );
        END IF;
    END IF;
END;

---

CREATE TABLE FUNCAO (
    CDFUNCAO    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NMFUNCAO    VARCHAR2(80) NOT NULL,
    DSFUNCAO    VARCHAR2(255) NOT NULL,
    DTCADASTRO  DATE DEFAULT SYSDATE,
    HRCADASTRO  DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_FUNCAO PRIMARY KEY (CDFUNCAO)
);

CREATE TABLE LOG_FUNCAO (
    CDFUNCAO     NUMBER(5) NOT NULL,
    NRLOG        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NMFUNCAO     VARCHAR2(80) NOT NULL,
    DSFUNCAO     VARCHAR2(255) NOT NULL,
    FLTIPOLOG    CHAR(1) NOT NULL,
    DTALTERACAO  DATE DEFAULT SYSDATE,
    HRALTERACAO  DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_FUNCAO_LOG PRIMARY KEY (CDFUNCAO, NRLOG)
);

CREATE OR REPLACE TRIGGER TRIGGER_FUNCAO
    AFTER INSERT OR UPDATE OR DELETE ON FUNCAO FOR EACH ROW
DECLARE
    strGeraLog  CHAR(1);
    strOperacao CHAR(1);
BEGIN
    IF INSERTING THEN strOperacao := 'I';
    ELSIF UPDATING THEN strOperacao := 'A';
    ELSIF DELETING THEN strOperacao := 'E';
    END IF;

    strGeraLog := 'S';

    IF (strOperacao = 'A') THEN
        IF (:OLD.CDFUNCAO = :NEW.CDFUNCAO)
           AND (:OLD.NMFUNCAO = :NEW.NMFUNCAO)
           AND (:OLD.DSFUNCAO = :NEW.DSFUNCAO)
        THEN
            strGeraLog := 'N';
        END IF;
    END IF;

    IF (strGeraLog = 'S') THEN
        IF strOperacao IN ('I', 'A') THEN
            INSERT INTO LOG_FUNCAO (
                CDFUNCAO,
                FLTIPOLOG,
                NMFUNCAO,
                DSFUNCAO,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                :NEW.CDFUNCAO,
                strOperacao,
                :NEW.NMFUNCAO,
                :NEW.DSFUNCAO,
                TRUNC(SYSDATE),
                SYSDATE
            );
        ELSE
            INSERT INTO LOG_FUNCAO (
                CDFUNCAO,
                FLTIPOLOG,
                NMFUNCAO,
                DSFUNCAO,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                :OLD.CDFUNCAO,
                strOperacao,
                :OLD.NMFUNCAO,
                :OLD.DSFUNCAO,
                TRUNC(SYSDATE),
                SYSDATE
            );
        END IF;
    END IF;
END;
--

CREATE TABLE TAG (
    CDTAG       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NMTAG       VARCHAR2(80) NOT NULL,
    DSTAG       VARCHAR2(255) NOT NULL,
    DTCADASTRO  DATE DEFAULT SYSDATE,
    HRCADASTRO  DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_TAG PRIMARY KEY (CDTAG)
);

CREATE TABLE LOG_TAG (
    CDTAG        NUMBER(5) NOT NULL,
    NRLOG        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NMTAG        VARCHAR2(80) NOT NULL,
    DSTAG        VARCHAR2(255) NOT NULL,
    FLTIPOLOG    CHAR(1) NOT NULL,
    DTALTERACAO  DATE DEFAULT SYSDATE,
    HRALTERACAO  DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_TAG_LOG PRIMARY KEY (CDTAG, NRLOG)
);

CREATE OR REPLACE TRIGGER TRIGGER_TAG
    AFTER INSERT OR UPDATE OR DELETE ON TAG FOR EACH ROW
DECLARE
    strGeraLog  CHAR(1);
    strOperacao CHAR(1);
BEGIN
    IF INSERTING THEN strOperacao := 'I';
    ELSIF UPDATING THEN strOperacao := 'A';
    ELSIF DELETING THEN strOperacao := 'E';
    END IF;

    strGeraLog := 'S';

    IF (strOperacao = 'A') THEN
        IF (:OLD.CDTAG = :NEW.CDTAG)
           AND (:OLD.NMTAG = :NEW.NMTAG)
           AND (:OLD.DSTAG = :NEW.DSTAG)
        THEN
            strGeraLog := 'N';
        END IF;
    END IF;

    IF (strGeraLog = 'S') THEN
        IF strOperacao IN ('I', 'A') THEN
            INSERT INTO LOG_TAG (
                CDTAG,
                FLTIPOLOG,
                NMTAG,
                DSTAG,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                :NEW.CDTAG,
                strOperacao,
                :NEW.NMTAG,
                :NEW.DSTAG,
                TRUNC(SYSDATE),
                SYSDATE
            );
        ELSE
            INSERT INTO LOG_TAG (
                CDTAG,
                FLTIPOLOG,
                NMTAG,
                DSTAG,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                :OLD.CDTAG,
                strOperacao,
                :OLD.NMTAG,
                :OLD.DSTAG,
                TRUNC(SYSDATE),
                SYSDATE
            );
        END IF;
    END IF;
END;
--

CREATE TABLE USUARIO (
    CDUSUARIO   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NMUSUARIO   VARCHAR2(80) NOT NULL,
    DSUSUARIO   VARCHAR2(255) NOT NULL,
    DSEMAIL     VARCHAR2(255) NOT NULL,
    DSPASSHASH  VARCHAR2(255) NOT NULL,
    DSBIO       VARCHAR2(255) NOT NULL,
    DSIMAGEM    VARCHAR2(255) NOT NULL,
    DTCADASTRO  DATE DEFAULT SYSDATE,
    HRCADASTRO  DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_USUARIO PRIMARY KEY (CDUSUARIO)
);

CREATE TABLE LOG_USUARIO (
    CDUSUARIO   NUMBER(5) NOT NULL,
    NRLOG       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NMUSUARIO   VARCHAR2(80) NOT NULL,
    DSUSUARIO   VARCHAR2(255) NOT NULL,
    DSEMAIL     VARCHAR2(255) NOT NULL,
    DSPASSHASH  VARCHAR2(255) NOT NULL,
    DSBIO       VARCHAR2(255) NOT NULL,
    DSIMAGEM    VARCHAR2(255) NOT NULL,
    FLTIPOLOG   CHAR(1) NOT NULL,
    DTALTERACAO DATE DEFAULT SYSDATE,
    HRALTERACAO DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_USUARIO_LOG PRIMARY KEY (CDUSUARIO, NRLOG)
);

CREATE OR REPLACE TRIGGER TRIGGER_USUARIO
    AFTER INSERT OR UPDATE OR DELETE ON USUARIO FOR EACH ROW
DECLARE
    strGeraLog  CHAR(1);
    strOperacao CHAR(1);
BEGIN
    IF INSERTING THEN strOperacao := 'I';
    ELSIF UPDATING THEN strOperacao := 'A';
    ELSIF DELETING THEN strOperacao := 'E';
    END IF;

    strGeraLog := 'S';

    IF (strOperacao = 'A') THEN
        IF (:OLD.CDUSUARIO = :NEW.CDUSUARIO)
           AND (:OLD.NMUSUARIO = :NEW.NMUSUARIO)
           AND (:OLD.DSUSUARIO = :NEW.DSUSUARIO)
           AND (:OLD.DSEMAIL = :NEW.DSEMAIL)
           AND (:OLD.DSPASSHASH = :NEW.DSPASSHASH)
           AND (:OLD.DSBIO = :NEW.DSBIO)
           AND (:OLD.DSIMAGEM = :NEW.DSIMAGEM)
        THEN
            strGeraLog := 'N';
        END IF;
    END IF;

    IF (strGeraLog = 'S') THEN
        IF strOperacao IN ('I', 'A') THEN
            INSERT INTO LOG_USUARIO (
                CDUSUARIO,
                FLTIPOLOG,
                NMUSUARIO,
                DSUSUARIO,
                DSEMAIL,
                DSPASSHASH,
                DSBIO,
                DSIMAGEM,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                :NEW.CDUSUARIO,
                strOperacao,
                :NEW.NMUSUARIO,
                :NEW.DSUSUARIO,
                :NEW.DSEMAIL,
                :NEW.DSPASSHASH,
                :NEW.DSBIO,
                :NEW.DSIMAGEM,
                TRUNC(SYSDATE),
                SYSDATE
            );
        ELSE
            INSERT INTO LOG_USUARIO (
                CDUSUARIO,
                FLTIPOLOG,
                NMUSUARIO,
                DSUSUARIO,
                DSEMAIL,
                DSPASSHASH,
                DSBIO,
                DSIMAGEM,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                :OLD.CDUSUARIO,
                strOperacao,
                :OLD.NMUSUARIO,
                :OLD.DSUSUARIO,
                :OLD.DSEMAIL,
                :OLD.DSPASSHASH,
                :OLD.DSBIO,
                :OLD.DSIMAGEM,
                TRUNC(SYSDATE),
                SYSDATE
            );
        END IF;
    END IF;
END;
--

CREATE TABLE POST (
    CDPOST      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    CDUSUARIO   NUMBER(5) NOT NULL,
    CDCATEGORIA NUMBER(5) NOT NULL,
    DSTITULO    VARCHAR2(255) NOT NULL,
    DSSUMARIO   VARCHAR2(255) NOT NULL,
    DSCORPO     VARCHAR2(255) NOT NULL,
    DSPOST      VARCHAR2(255) NOT NULL,
    DTCADASTRO  DATE DEFAULT SYSDATE,
    HRCADASTRO  DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT FK_POST_TEM_USUARIO FOREIGN KEY (CDUSUARIO) REFERENCES USUARIO (CDUSUARIO),
    CONSTRAINT FK_POST_TEM_CATEGORIA FOREIGN KEY (CDCATEGORIA) REFERENCES CATEGORIA (CDCATEGORIA),
    CONSTRAINT PK_POST PRIMARY KEY (CDPOST)
);

CREATE TABLE LOG_POST (
    CDPOST      NUMBER(5) NOT NULL,
    NRLOG       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    CDUSUARIO   NUMBER(5) NOT NULL,
    CDCATEGORIA NUMBER(5) NOT NULL,
    NMUSUARIO   VARCHAR2(80) NOT NULL,
    DSTITULO    VARCHAR2(255) NOT NULL,
    DSSUMARIO   VARCHAR2(255) NOT NULL,
    DSCORPO     VARCHAR2(255) NOT NULL,
    DSPOST      VARCHAR2(255) NOT NULL,
    FLTIPOLOG   CHAR(1) NOT NULL,
    DTALTERACAO DATE DEFAULT SYSDATE,
    HRALTERACAO DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_POST_LOG PRIMARY KEY (CDPOST, NRLOG)
);

CREATE OR REPLACE TRIGGER TRIGGER_POST
    AFTER INSERT OR UPDATE OR DELETE ON POST FOR EACH ROW
DECLARE
    strGeraLog  CHAR(1);
    strOperacao CHAR(1);
BEGIN
    IF INSERTING THEN strOperacao := 'I';
    ELSIF UPDATING THEN strOperacao := 'A';
    ELSIF DELETING THEN strOperacao := 'E';
    END IF;

    strGeraLog := 'S';

    IF (strOperacao = 'A') THEN
        IF (:OLD.CDPOST = :NEW.CDPOST)
           AND (:OLD.CDUSUARIO = :NEW.CDUSUARIO)
           AND (:OLD.CDCATEGORIA = :NEW.CDCATEGORIA)
           AND (:OLD.DSTITULO = :NEW.DSTITULO)
           AND (:OLD.DSCORPO = :NEW.DSCORPO)
           AND (:OLD.DSPOST = :NEW.DSPOST)
        THEN
            strGeraLog := 'N';
        END IF;
    END IF;

    IF (strGeraLog = 'S') THEN
        IF strOperacao IN ('I', 'A') THEN
            INSERT INTO LOG_POST (
                CDPOST,
                CDUSUARIO,
                CDCATEGORIA,
                FLTIPOLOG,
                DSTITULO,
                DSCORPO,
                DSPOST,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                :NEW.CDPOST,
                :NEW.CDUSUARIO,
                :NEW.CDCATEGORIA,
                strOperacao,
                :NEW.DSTITULO,
                :NEW.DSCORPO,
                :NEW.DSPOST,
                TRUNC(SYSDATE),
                SYSDATE
            );
        ELSE
            INSERT INTO LOG_POST (
                CDPOST,
                CDUSUARIO,
                CDCATEGORIA,
                FLTIPOLOG,
                DSTITULO,
                DSCORPO,
                DSPOST,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                :OLD.CDPOST,
                :OLD.CDUSUARIO,
                :OLD.CDCATEGORIA,
                strOperacao,
                :OLD.DSTITULO,
                :OLD.DSCORPO,
                :OLD.DSPOST,
                TRUNC(SYSDATE),
                SYSDATE
            );
        END IF;
    END IF;
END;
--

CREATE TABLE POSTTAG (
    CDPOST  NUMBER(5) NOT NULL,
    CDTAG   NUMBER(5) NOT NULL,
    DTCADASTRO  DATE DEFAULT SYSDATE,
    HRCADASTRO  DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT FK_TEM_POST FOREIGN KEY (CDPOST) REFERENCES POST (CDPOST),
    CONSTRAINT FK_TEM_TAG FOREIGN KEY (CDTAG) REFERENCES TAG (CDTAG),
    CONSTRAINT PK_POSTTAG PRIMARY KEY (CDPOST, CDTAG)
);

CREATE TABLE LOG_POSTTAG (
    CDPOST      NUMBER(5) NOT NULL,
    CDTAG       NUMBER(5) NOT NULL,
    NRLOG       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    FLTIPOLOG   CHAR(1) NOT NULL,
    DTALTERACAO DATE DEFAULT SYSDATE,
    HRALTERACAO DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_POSTTAG_LOG PRIMARY KEY (CDPOST, CDTAG, NRLOG)
);

CREATE OR REPLACE TRIGGER TRIGGER_POSTTAG
    AFTER INSERT OR UPDATE OR DELETE ON POSTTAG FOR EACH ROW
DECLARE
    strGeraLog  CHAR(1);
    strOperacao CHAR(1);
BEGIN
    IF INSERTING THEN strOperacao := 'I';
    ELSIF UPDATING THEN strOperacao := 'A';
    ELSIF DELETING THEN strOperacao := 'E';
    END IF;

    strGeraLog := 'S';

    IF (strOperacao = 'A') THEN
        IF (:OLD.CDPOST = :NEW.CDPOST)
           AND (:OLD.CDTAG = :NEW.CDTAG)
        THEN
            strGeraLog := 'N';
        END IF;
    END IF;

    IF (strGeraLog = 'S') THEN
        IF strOperacao IN ('I', 'A') THEN
            INSERT INTO LOG_POSTTAG (
                FLTIPOLOG,
                CDPOST,
                CDTAG,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                strOperacao,
                :NEW.CDPOST,
                :NEW.CDTAG,
                TRUNC(SYSDATE),
                SYSDATE
            );
        ELSE
            INSERT INTO LOG_POSTTAG (
                FLTIPOLOG,
                CDPOST,
                CDTAG,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                strOperacao,
                :OLD.CDPOST,
                :OLD.CDTAG,
                TRUNC(SYSDATE),
                SYSDATE
            );
        END IF;
    END IF;
END;
--

CREATE TABLE FUNCAOUSUARIO (
    CDUSUARIO  NUMBER(5) NOT NULL,
    CDFUNCAO   NUMBER(5) NOT NULL,
    DTCADASTRO  DATE DEFAULT SYSDATE,
    HRCADASTRO  DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT FK_FUNCAO_TEM_USUARIO FOREIGN KEY (CDUSUARIO) REFERENCES USUARIO (CDUSUARIO),
    CONSTRAINT FK_TEM_FUNCAO FOREIGN KEY (CDFUNCAO) REFERENCES FUNCAO (CDFUNCAO),
    CONSTRAINT PK_FUNCAOUSUARIO PRIMARY KEY (CDUSUARIO, CDFUNCAO)
);

CREATE TABLE LOG_FUNCAOUSUARIO (
    CDUSUARIO  NUMBER(5) NOT NULL,
    CDFUNCAO   NUMBER(5) NOT NULL,
    NRLOG       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    FLTIPOLOG   CHAR(1) NOT NULL,
    DTALTERACAO  DATE DEFAULT SYSDATE,
    HRALTERACAO  DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT PK_FUNCAOUSUARIO_LOG PRIMARY KEY (CDUSUARIO, CDFUNCAO, NRLOG)
);

CREATE OR REPLACE TRIGGER TRIGGER_FUNCAOUSUARIO
    AFTER INSERT OR UPDATE OR DELETE ON FUNCAOUSUARIO FOR EACH ROW
DECLARE
    strGeraLog  CHAR(1);
    strOperacao CHAR(1);
BEGIN
    IF INSERTING THEN strOperacao := 'I';
    ELSIF UPDATING THEN strOperacao := 'A';
    ELSIF DELETING THEN strOperacao := 'E';
    END IF;

    strGeraLog := 'S';

    IF (strOperacao = 'A') THEN
        IF (:OLD.CDUSUARIO = :NEW.CDUSUARIO)
           AND (:OLD.CDFUNCAO = :NEW.CDFUNCAO)
        THEN
            strGeraLog := 'N';
        END IF;
    END IF;

    IF (strGeraLog = 'S') THEN
        IF strOperacao IN ('I', 'A') THEN
            INSERT INTO LOG_FUNCAOUSUARIO (
                FLTIPOLOG,
                CDUSUARIO,
                CDFUNCAO,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                strOperacao,
                :NEW.CDUSUARIO,
                :NEW.CDFUNCAO,
                TRUNC(SYSDATE),
                SYSDATE
            );
        ELSE
            INSERT INTO LOG_FUNCAOUSUARIO (
                FLTIPOLOG,
                CDUSUARIO,
                CDFUNCAO,
                DTALTERACAO,
                HRALTERACAO
            )
            VALUES(
                strOperacao,
                :OLD.CDUSUARIO,
                :OLD.CDFUNCAO,
                TRUNC(SYSDATE),
                SYSDATE
            );
        END IF;
    END IF;
END;
--

CREATE OR REPLACE PROCEDURE "PROC_FUNCAO_USUARIO" (
    codigoUsuario  NUMBER,
    codigoFuncao  NUMBER,
    strOperacao CHAR
)
IS
  ROW NUMBER;
BEGIN
    IF (strOperacao = 'I') THEN
        INSERT INTO BLOG.FUNCAOUSUARIO (
            CDUSUARIO,
            CDFUNCAO
        ) VALUES (
            codigoUsuario,
            codigoFuncao
        );
    END IF;
    
    IF (strOperacao = 'D') THEN
        DELETE FROM BLOG.FUNCAOUSUARIO WHERE CDUSUARIO = codigoUsuario AND CDFUNCAO = codigoFuncao;
    END IF;
END PROC_FUNCAO_USUARIO;
--

COMMIT;